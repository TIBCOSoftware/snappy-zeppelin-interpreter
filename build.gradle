/*
 * Copyright (c) 2017 SnappyData, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

plugins {
  id 'com.github.johnrengelman.shadow' version '2.0.1'
}

group 'io.snappydata'
version '0.7.3'

apply plugin: 'java'
apply plugin: 'wrapper'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'distribution'


repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://oss.sonatype.org/content/repositories/public" }
}

gradle.taskGraph.whenReady( { graph ->
    tasks.withType(Tar).each { tar ->
        tar.compression = Compression.GZIP
        tar.extension = 'tar.gz'
    }
})

buildDir = 'build-artifacts'
ext {
    vendorName = 'SnappyData, Inc.'
    scalaBinaryVersion = '2.11'
    scalaVersion = scalaBinaryVersion + '.8'
    buildDir = 'build-artifacts'
    snappySparkVersion = '2.1.1.1'
    snappyDataVersion = '1.0.0'
    gemfireVersion = "1.6.0"
    zeppelinVersion = '0.7.3'

    createdBy = System.getProperty('user.name')
}

configurations {
    provided
    compile.extendsFrom provided
}
configurations.archives.with {
    artifacts.remove artifacts.find { it.archiveTask.is distTar}
    artifacts.remove artifacts.find { it.archiveTask.is distZip}
}
dependencies {
    compile group: 'org.apache.zeppelin', name: 'zeppelin-interpreter', version: zeppelinVersion
    compile group: 'org.apache.zeppelin', name: 'zeppelin-spark_' + scalaBinaryVersion, version: zeppelinVersion
    compile group: 'org.apache.zeppelin', name: 'zeppelin-jdbc', version: zeppelinVersion
    compile(group: 'org.apache.hadoop', name: 'hadoop-aws', version: '2.7.3') {
      exclude(group: 'com.amazonaws', module: 'aws-java-sdk')
    }
    compile(group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.7.4') {
      // exclude joda-time already in spark-jobserver
      exclude(group: 'joda-time', module: 'joda-time')
    }

    provided "io.snappydata:snappydata-core_" + scalaBinaryVersion + ":" + snappyDataVersion
    provided "org.scala-lang:scala-library:" + scalaVersion
    provided 'org.scala-lang:scala-reflect:' + scalaVersion
    provided 'org.scala-lang:scala-compiler:' + scalaVersion
    provided "io.snappydata:snappy-spark-repl_" + scalaBinaryVersion + ":" + snappySparkVersion
    provided "io.snappydata:snappy-spark-core_" + scalaBinaryVersion + ":" + snappySparkVersion
    provided "io.snappydata:snappy-spark-catalyst_" + scalaBinaryVersion + ":" + snappySparkVersion

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task product(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
  zip64 = true
  baseName = "${rootProject.name}_${scalaBinaryVersion}"
  classifier = ''

  from { (project.configurations.runtime - project.configurations.provided).collect { it.isDirectory() ? '' : it.getPath() } }
  from project.sourceSets.main.output

  // avoid conflict with the version in SnappyData
  relocate 'org.apache.thrift', 'zeppelin.org.apache.thrift'
  // avoid conflict with the version in Spark
  relocate 'com.google.common', 'zeppelin.com.google.common'

  mergeServiceFiles()
  exclude 'META-INF/*.SF'
  exclude 'META-INF/*.DSA'
  exclude 'META-INF/*.RSA'

  // additional excludes from "shaded" zeppelin-spark that are already in SnappyData
  exclude 'com/google/gson/**'
  exclude 'org/apache/commons/codec/**'
  exclude 'META-INF/maven/commons-codec/**'
  exclude 'org/apache/commons/httpclient/**'
  exclude 'org/apache/commons/io/**'
  exclude 'META-INF/maven/commons-io/**'
  exclude 'org/apache/commons/logging/**'
  exclude 'META-INF/maven/commons-logging/**'
  exclude 'org/apache/commons/pool2/**'
  exclude 'META-INF/maven/org.apache.commons/commons-pool2/**'
  exclude 'org/apache/http/**'
  exclude 'META-INF/maven/org.apache.httpcomponents/**'
  exclude 'org/apache/log4j/**'
  exclude 'META-INF/maven/log4j/**'
  exclude 'org/slf4j/**'
  exclude 'META-INF/maven/org.slf4j/**'

  if (rootProject.hasProperty('enablePublish')) {
    createdBy = 'SnappyData Build Team'
  }
  manifest {
    attributes(
      'Manifest-Version'  : '1.0',
      'Created-By'        : createdBy,
      'Title'             : "snappydata-zeppelin_${scalaBinaryVersion}",
      'Version'           : version,
      'Vendor'            : vendorName
    )
  }
}

task packageSources(type: Jar, dependsOn: classes) {
    if (rootProject.hasProperty('enablePublish')) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}
task packageDocs(type: Jar, dependsOn: javadoc) {
    if (rootProject.hasProperty('enablePublish')) {
        classifier = 'javadoc'
        from javadoc
    }
}

artifacts {
    archives packageSources, packageDocs
}

distributions {
    main {
        baseName = 'snappydata-zeppelin'
        contents {
            from "${rootProject.buildDir}/libs/"
            from "src/main/resources/interpreter-setting.json"
            from "src/main/resources/ansi.sql.keywords"
        }
    }
}


distTar {
    dependsOn 'jar'
    classifier 'bin'
}

uploadArchives {
    if (rootProject.hasProperty('enablePublish')) {
        signing {
            sign configurations.archives
        }
    }
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            //repository(url: "file://localhost/home/sachin/.m2/repository")
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            pom.project {
                name 'SnappyData'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'SnappyData distributed data store and execution engine'
                url 'http://www.snappydata.io'

                scm {
                    connection 'scm:git:https://github.com/SnappyDataInc/snappydata.git'
                    developerConnection 'scm:git:https://github.com/SnappyDataInc/snappydata.git'
                    url 'https://github.com/SnappyDataInc/snappydata'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'smenon'
                        name 'Sudhir Menon'
                        email 'smenon@snappydata.io'
                    }
                }
            }
        }
    }

    // Dependencies for pom generation
    /*
    dependencies {
        compile group: 'org.apache.zeppelin', name: 'zeppelin-interpreter', version: zeppelinVersion
        compile group: 'org.apache.zeppelin', name: 'zeppelin-spark_' + scalaBinaryVersion, version: zeppelinVersion
        compile group: 'org.apache.zeppelin', name: 'zeppelin-jdbc', version: zeppelinVersion
        compile group: 'org.apache.hadoop', name: 'hadoop-aws', version: '2.7.3'
        compile group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.7.4'

        compile "io.snappydata:snappydata-core_" + scalaBinaryVersion + ":" + snappyDataVersion
        compile "org.scala-lang:scala-library:" + scalaVersion
        compile 'org.scala-lang:scala-reflect:' + scalaVersion
        compile 'org.scala-lang:scala-compiler:' + scalaVersion
        compile "io.snappydata:snappy-spark-repl_" + scalaBinaryVersion + ":" + snappySparkVersion
        compile "io.snappydata:snappy-spark-core_" + scalaBinaryVersion + ":" + snappySparkVersion
        compile "io.snappydata:snappy-spark-catalyst_" + scalaBinaryVersion + ":" + snappySparkVersion

        testCompile group: 'junit', name: 'junit', version: '4.11'
    }
    */
}

task publishLocal {
    dependsOn 'jar'
    dependsOn ':install'
}


task publishMaven {
    dependsOn ':uploadArchives'
}

def installer = install.repositories.mavenInstaller
def deployer = uploadArchives.repositories.mavenDeployer

[installer, deployer]*.pom*.whenConfigured {pom ->
    pom.dependencies.find {dep -> dep }.optional = true
}
