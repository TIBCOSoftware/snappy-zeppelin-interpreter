{"paragraphs":[{"text":"%angular\n<script>\n    function openSnappyPulse(){\n      var proto = window.location.protocol;\n      var currHost = window.location.host;\n      var pulseUrl = proto + '//' + currHost.substring(0, currHost.indexOf(':') + 1) + '5050/dashboard/';\n      window.open(pulseUrl, \"_blank\");\n    }\n</script>\n\n<div style=\"background-color:whitesmoke;\">\n<br>\n <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openSnappyPulse();\">Monitoring Console </span>\n<br>\n<a href=\"#/notebook/2ETF88QQF\">Zeppelin Notebook Manager</a>\n<br>\n    \n<h4>Quickstarts</h4>\n&ensp;<a href=\"#/notebook/quickstart\" >Using Spark Scala API</a>\n<br>\n&ensp;<a href=\"#/notebook/2EVF37179\" >Using SQL</a>\n<br>\n&ensp;<a href=\"#/notebook/performance\">Performance Benchmark</a>\n<br>\n\n<h4>External Data Sources </h4>\n&ensp;<a href=\"#/notebook/2EU4EJDHJ\">Load from External Data Sources</a>\n<br>\n&ensp;<a href=\"#/notebook/2EU6ZXZQJ\">Manage Connectors</a>\n<br>\n&ensp;<a href=\"#/notebook/2EUZ88BBY\">Data transformation examples</a>\n<br>\n\n<h4><b> Structured Streaming </b></h4>\n<!--&ensp;<a href=\"#/notebook/2EUCAD6QP\">Example using file source</a>-->\n&ensp;<b><i>Example using file source</i></b>\n\n<h4> Demos with Big Datasets</h4>\n&ensp;<a href=\"#/notebook/airlineanalytics\">Airline Analytics Demo</a>\n<br>\n&ensp;<a href=\"#/notebook/nyctaxianalytics\">NYC Taxi Analytics Demo</a>\n<br>\n&ensp;<a href=\"#/notebook/2DKKFJNZR\">Performance Benchmark(S3 dataset)</a>\n<br>\n\n<h4>References</h4>\n&ensp;<a href=\"https://tibco-computedb.readthedocs.io/en/enterprise_docv1.2/\" target=\"_blank\">ComputeDB documentation</a>\n<br>\n&ensp;<a href=\"https://zeppelin.apache.org/docs/0.8.2/index.html\" target=\"_blank\">Zeppelin Documentation</a>\n</div>\n","user":"anonymous","dateUpdated":"2019-12-18T10:09:46+0530","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":2,"editorMode":"ace/mode/undefined","fontSize":9,"editorHide":true,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<script>\n    function openSnappyPulse(){\n      var proto = window.location.protocol;\n      var currHost = window.location.host;\n      var pulseUrl = proto + '//' + currHost.substring(0, currHost.indexOf(':') + 1) + '5050/dashboard/';\n      window.open(pulseUrl, \"_blank\");\n    }\n</script>\n\n<div style=\"background-color:whitesmoke;\">\n<br>\n <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openSnappyPulse();\">Monitoring Console </span>\n<br>\n<a href=\"#/notebook/2ETF88QQF\">Zeppelin Notebook Manager</a>\n<br>\n    \n<h4>Quickstarts</h4>\n&ensp;<a href=\"#/notebook/quickstart\" >Using Spark Scala API</a>\n<br>\n&ensp;<a href=\"#/notebook/2EVF37179\" >Using SQL</a>\n<br>\n&ensp;<a href=\"#/notebook/performance\">Performance Benchmark</a>\n<br>\n\n<h4>External Data Sources </h4>\n&ensp;<a href=\"#/notebook/2EU4EJDHJ\">Load from External Data Sources</a>\n<br>\n&ensp;<a href=\"#/notebook/2EU6ZXZQJ\">Manage Connectors</a>\n<br>\n&ensp;<a href=\"#/notebook/2EUZ88BBY\">Data transformation examples</a>\n<br>\n\n<h4><b> Structured Streaming </b></h4>\n<!--&ensp;<a href=\"#/notebook/2EUCAD6QP\">Example using file source</a>-->\n&ensp;<b><i>Example using file source</i></b>\n\n<h4> Demos with Big Datasets</h4>\n&ensp;<a href=\"#/notebook/airlineanalytics\">Airline Analytics Demo</a>\n<br>\n&ensp;<a href=\"#/notebook/nyctaxianalytics\">NYC Taxi Analytics Demo</a>\n<br>\n&ensp;<a href=\"#/notebook/2DKKFJNZR\">Performance Benchmark(S3 dataset)</a>\n<br>\n\n<h4>References</h4>\n&ensp;<a href=\"https://tibco-computedb.readthedocs.io/en/enterprise_docv1.2/\" target=\"_blank\">ComputeDB documentation</a>\n<br>\n&ensp;<a href=\"https://zeppelin.apache.org/docs/0.8.2/index.html\" target=\"_blank\">Zeppelin Documentation</a>\n</div>"}]},"apps":[],"jobName":"paragraph_1576643986479_1043290508","id":"20191212-221048_102894477","dateCreated":"2019-12-18T10:09:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17236"},{"text":"%angular\n<div style=\"background-color:whitesmoke\">\n<h2>Structured streaming using file source</h2>\n<head>\n<style>\n.boxed {\n  border: 1px black;\n}\n</style>\n</head>\n<body>\nThis notebook explains usage of structured streaming using a file source. We will use CSV file source.\n\nThe incoming data has following fields: \n\n<div class=\"boxed\" style=\"border: 2px solid black;width:200px;\">\n&emsp;deviceId : String <br>\n&emsp;signal : Int <br>\n</div>\n<ul>\n<li>The streaming query will find average signal strenght grouped by device id and update the target table with the same.</li>\n<li>Step 3 of this notebook generates 10 data files on each run. The same step can be re-run to generate more data.</li>\n<li> Monitor the Cluster, check memory consumption using <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openSnappyPulse();\">Monitoring Console </span> <br>The Dashboard tab can be used to monitor the cluster and check the memory consumed by the samples.</li>\n<li>The progress of the streaming query can be monitored using the <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openStucturedStreamingUI();\">structured streaming tab</a></span> of the Monitoring Console.</li>\n\n</ul>\n<h5 style=\"color:red;font-weight:bold\">Anonymous user needs to clone this notebook to execute the paragraphs. Clone option available in the pane next to name of the notebook at the top of the page.</h5>\n\n</div>\n\n<script>\n    function openStucturedStreamingUI(){\n      var proto = window.location.protocol;\n      var currHost = window.location.host;\n      var pulseUrl = proto + '//' + currHost.substring(0, currHost.indexOf(':') + 1) + '5050/structuredstreaming';\n      window.open(pulseUrl, \"_blank\");\n    }\n</script>\n</body>\n","user":"anonymous","dateUpdated":"2019-12-18T10:09:46+0530","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":10,"editorMode":"ace/mode/undefined","fontSize":9,"editorHide":true,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<div style=\"background-color:whitesmoke\">\n<h2>Structured streaming using file source</h2>\n<head>\n<style>\n.boxed {\n  border: 1px black;\n}\n</style>\n</head>\n<body>\nThis notebook explains usage of structured streaming using a file source. We will use CSV file source.\n\nThe incoming data has following fields: \n\n<div class=\"boxed\" style=\"border: 2px solid black;width:200px;\">\n&emsp;deviceId : String <br>\n&emsp;signal : Int <br>\n</div>\n<ul>\n<li>The streaming query will find average signal strenght grouped by device id and update the target table with the same.</li>\n<li>Step 3 of this notebook generates 10 data files on each run. The same step can be re-run to generate more data.</li>\n<li> Monitor the Cluster, check memory consumption using <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openSnappyPulse();\">Monitoring Console </span> <br>The Dashboard tab can be used to monitor the cluster and check the memory consumed by the samples.</li>\n<li>The progress of the streaming query can be monitored using the <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openStucturedStreamingUI();\">structured streaming tab</a></span> of the Monitoring Console.</li>\n\n</ul>\n<h5 style=\"color:red;font-weight:bold\">Anonymous user needs to clone this notebook to execute the paragraphs. Clone option available in the pane next to name of the notebook at the top of the page.</h5>\n\n</div>\n\n<script>\n    function openStucturedStreamingUI(){\n      var proto = window.location.protocol;\n      var currHost = window.location.host;\n      var pulseUrl = proto + '//' + currHost.substring(0, currHost.indexOf(':') + 1) + '5050/structuredstreaming';\n      window.open(pulseUrl, \"_blank\");\n    }\n</script>\n</body>"}]},"apps":[],"jobName":"paragraph_1576643986479_1757628088","id":"20191210-142204_1697811294","dateCreated":"2019-12-18T10:09:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17237"},{"title":"Step 1 : Define global variables","text":"%snappydata.sql\nexec scala\nval tmpDir = \"/tmp/file_stream\"\nval queryName = \"file_stream\"","user":"anonymous","dateUpdated":"2019-12-18T10:09:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":10,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"C0":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576643986480_-1746974609","id":"20191211-113336_1468773935","dateCreated":"2019-12-18T10:09:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17238"},{"title":"Step 2: Create target table to hold average signal strength for devices","text":"%snappydata.sql\ndrop table if exists devices;\ncreate table devices (device_id varchar(30) , signal_avg float) using column options(key_columns 'device_id');","user":"anonymous","dateUpdated":"2019-12-18T10:09:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576643986480_-763627009","id":"20191210-141546_970850588","dateCreated":"2019-12-18T10:09:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17239"},{"title":"Step 3: Produce some synthetic input data","text":"%snappydata.sql\nexec scala\n\n// Each run of this paragraph will create a file containing signal strength (generated randomly)\n// of 50 devices. The streaming queery will process one file per batch.\n\nimport java.io.{FileWriter, BufferedWriter, File}\n\n// Directory where the files will be generated\nval inputDir = s\"$tmpDir/input\"\nnew File(inputDir).mkdirs()\nval r = scala.util.Random\n(0 to 10).foreach(_ => {\n  val file = new File(inputDir + \"/\" + System.currentTimeMillis + \".csv\")\n  file.createNewFile()\n  val bw = new BufferedWriter(new FileWriter(file))\n  (0 to 50).map(i => \"device\" + i + \",\" + r.nextInt(100) + \"\\n\").foreach(line => bw.write(line))\n  bw.close\n}\n)","user":"anonymous","dateUpdated":"2019-12-18T10:09:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"C0":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{"inputDir":"","System.currentTimeMillis":"","r.nextInt":""},"forms":{}},"apps":[],"jobName":"paragraph_1576643986480_826335323","id":"20191210-145851_131595422","dateCreated":"2019-12-18T10:09:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17240"},{"title":"Step 4: Start structured streaming query","text":"%snappydata.sql\nexec scala\n\nimport snappy.implicits._\nimport org.apache.spark.sql.streaming.ProcessingTime\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.functions._\n\nval checkpointLocation = tmpDir + \"/checkpoint\"\nval schema = StructType(Seq(StructField(\"device\", StringType, true), StructField(\"signal\", IntegerType, true)))\n// Create DataFrame representing the stream of CSV records\nval df = snappy.readStream.\n  option(\"maxFilesPerTrigger\", 1). // controls number of files to be processed per batch\n  schema(schema).\n  csv(inputDir)\n\nval streamingQuery = df.groupBy(\"device\").agg(avg(\"signal\")).\n  writeStream.\n  format(\"snappysink\").\n  queryName(queryName). // must be unique across a snappydata cluster\n  trigger(ProcessingTime(\"1 seconds\")). // streaming query trigger interval\n  option(\"tableName\", \"devices\"). // name of the target table\n  option(\"stateTableSchema\", \"app\").\n  outputMode(\"update\").\n  option(\"checkpointLocation\", checkpointLocation).\n  start()","user":"anonymous","dateUpdated":"2019-12-18T10:09:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"C0":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}},"helium":{}}},"enabled":true},"settings":{"params":{"tmpDir":""},"forms":{}},"apps":[],"jobName":"paragraph_1576643986480_411045737","id":"20191210-140515_1050589296","dateCreated":"2019-12-18T10:09:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17241"},{"title":"Step 5: Check the loaded data in the target table","text":"%snappydata.sql\nselect * from devices;","user":"anonymous","dateUpdated":"2019-12-18T10:09:46+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"device_id":"string","signal_avg":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"device","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"signal_avg","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576643986480_-1959903179","id":"20191210-235921_510033797","dateCreated":"2019-12-18T10:09:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17242"},{"title":"Step 6 - Stop the streaming query","text":"%snappydata.sql\nexec scala\n\nstreamingQuery.stop","user":"anonymous","dateUpdated":"2019-12-18T10:09:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"C0":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576643986480_806274056","id":"20191210-140632_1936469976","dateCreated":"2019-12-18T10:09:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17243"},{"title":"Step 7: Clean up","text":"%snappydata.sql\n\nexec scala\nimport scala.reflect.io.Path\n// CAUTION: recursively deleting directory. \nPath(tmpDir).deleteRecursively()\n\n// clean up sink state table\nsnappy.sql(\"delete from SNAPPYSYS_INTERNAL____SINK_STATE_TABLE where stream_query_id = '\" + queryName + \"'\")\n","user":"anonymous","dateUpdated":"2019-12-18T10:09:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"C0":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576643986480_1340503437","id":"20191210-141459_1467823059","dateCreated":"2019-12-18T10:09:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17244"},{"text":"%snappydata.sql\n","user":"anonymous","dateUpdated":"2019-12-18T10:09:46+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576643986481_-1219838291","id":"20191211-115629_1014221440","dateCreated":"2019-12-18T10:09:46+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:17245"}],"name":"Snappy/7. Structured Streaming using File Stream","id":"2EVYQ78ZR","noteParams":{},"noteForms":{},"angularObjects":{"angular:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}
