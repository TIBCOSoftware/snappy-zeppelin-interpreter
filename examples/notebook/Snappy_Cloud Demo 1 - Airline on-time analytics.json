{"paragraphs":[{"text":"%angular\n<script>\n    function openSnappyPulse(){\n      var proto = window.location.protocol;\n      var currHost = window.location.host;\n      var pulseUrl = proto + '//' + currHost.substring(0, currHost.indexOf(':') + 1) + '5050/dashboard/';\n      window.open(pulseUrl, \"_blank\");\n    }\n</script>\n\n<div style=\"background-color:whitesmoke;\">\n<br>\n <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openSnappyPulse();\">Monitoring Console </span>\n<br>\n<a href=\"#/notebook/2ETF88QQF\">Zeppelin Notebook Manager</a>\n<br>\n    \n<h4>Quickstarts</h4>\n&ensp;<a href=\"#/notebook/quickstart\" >Using Spark Scala API</a>\n<br>\n&ensp;<a href=\"#/notebook/2EVF37179\" >Using SQL</a>\n<br>\n&ensp;<a href=\"#/notebook/performance\">Performance Benchmark</a>\n<br>\n\n<h4>External Data Sources </h4>\n&ensp;<a href=\"#/notebook/2EU4EJDHJ\">Load from External Data Sources</a>\n<br>\n&ensp;<a href=\"#/notebook/2EU6ZXZQJ\">Manage Connectors</a>\n<br>\n&ensp;<a href=\"#/notebook/2EUZ88BBY\">Data transformation examples</a>\n<br>\n\n<h4> Structured Streaming </h4>\n&ensp;<a href=\"#/notebook/2EUCAD6QP\">Example using file source</a>\n\n<h4><b> Demos with Big Datasets</b></h4>\n<!--&ensp;<a href=\"#/notebook/airlineanalytics\">Airline Analytics Demo</a>-->\n&ensp;<b><i>Airline Analytics Demo</i></b>\n<br>\n&ensp;<a href=\"#/notebook/nyctaxianalytics\">NYC Taxi Analytics Demo</a>\n<br>\n&ensp;<a href=\"#/notebook/2DKKFJNZR\">Performance Benchmark(S3 dataset)</a>\n<br>\n\n<h4>References</h4>\n&ensp;<a href=\"https://tibco-computedb.readthedocs.io/en/enterprise_docv1.2/\" target=\"_blank\">ComputeDB documentation</a>\n<br>\n&ensp;<a href=\"https://zeppelin.apache.org/docs/0.8.2/index.html\" target=\"_blank\">Zeppelin Documentation</a>\n</div>\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":2,"editorMode":"ace/mode/undefined","fontSize":9,"editorHide":true,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<script>\n    function openSnappyPulse(){\n      var proto = window.location.protocol;\n      var currHost = window.location.host;\n      var pulseUrl = proto + '//' + currHost.substring(0, currHost.indexOf(':') + 1) + '5050/dashboard/';\n      window.open(pulseUrl, \"_blank\");\n    }\n</script>\n\n<div style=\"background-color:whitesmoke;\">\n<br>\n <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openSnappyPulse();\">Monitoring Console </span>\n<br>\n<a href=\"#/notebook/2ETF88QQF\">Zeppelin Notebook Manager</a>\n<br>\n    \n<h4>Quickstarts</h4>\n&ensp;<a href=\"#/notebook/quickstart\" >Using Spark Scala API</a>\n<br>\n&ensp;<a href=\"#/notebook/2EVF37179\" >Using SQL</a>\n<br>\n&ensp;<a href=\"#/notebook/performance\">Performance Benchmark</a>\n<br>\n\n<h4>External Data Sources </h4>\n&ensp;<a href=\"#/notebook/2EU4EJDHJ\">Load from External Data Sources</a>\n<br>\n&ensp;<a href=\"#/notebook/2EU6ZXZQJ\">Manage Connectors</a>\n<br>\n&ensp;<a href=\"#/notebook/2EUZ88BBY\">Data transformation examples</a>\n<br>\n\n<h4> Structured Streaming </h4>\n&ensp;<a href=\"#/notebook/2EUCAD6QP\">Example using file source</a>\n\n<h4><b> Demos with Big Datasets</b></h4>\n<!--&ensp;<a href=\"#/notebook/airlineanalytics\">Airline Analytics Demo</a>-->\n&ensp;<b><i>Airline Analytics Demo</i></b>\n<br>\n&ensp;<a href=\"#/notebook/nyctaxianalytics\">NYC Taxi Analytics Demo</a>\n<br>\n&ensp;<a href=\"#/notebook/2DKKFJNZR\">Performance Benchmark(S3 dataset)</a>\n<br>\n\n<h4>References</h4>\n&ensp;<a href=\"https://tibco-computedb.readthedocs.io/en/enterprise_docv1.2/\" target=\"_blank\">ComputeDB documentation</a>\n<br>\n&ensp;<a href=\"https://zeppelin.apache.org/docs/0.8.2/index.html\" target=\"_blank\">Zeppelin Documentation</a>\n</div>"}]},"apps":[],"jobName":"paragraph_1578908650507_1744528972","id":"20191202-134355_603521495","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:29855"},{"title":"Objective","text":"%angular\n<div style=\"background-color:whitesmoke\">\n<h2>What does this demo showcase?</h2>\n<p>The U.S. Department of Transportation's (DOT) Bureau of Transportation Statistics (BTS) tracks the on-time performance of domestic flights operated by large air carriers.<br>\nSummary information on the number of on-time, delayed, canceled and diverted flights is available for the last 20 years.<br>\nIn this example we used the 2009-2015 data set (40 million records) and show simple analytic queries on \"exact\" as well as \"sampled\" data.You will be able to compare the response times and be able to inspect the accuracy differences.<br> \n<h5> The data set used here is relatively small (few GB of Parquet formatted data). The interesting thing about using stratified sampling is that the error rate drops exponentially with the size of the sample. The exponential error drop off implies with larger data sets, the sampling fraction can also keep getting smaller. e.g. you may need a 2 million sample for a data set with 200 million records, but, may only need a 3 million sample for a data set with a billion records to achieve the same level of accuracy.</h5>\n<h5 style=\"color:red;font-weight:bold\">Anonymous user needs to clone this notebook to execute the paragraphs. Clone option available in the pane next to name of the notebook at the top of the page.</h5>\n<img src=\"https://drive.google.com/uc?export=view&id=0B7_m-QBIIyBQX2xhazR3MkI2UGs\" alt=\"OnTimePerformance\">\n\n<h5>You can always share your thoughts/questions or just encourage us at <a href=\"https://www.tibco.com/products/tibco-computedb\" target=\"_blank\"> https://www.tibco.com/products/tibco-computedb </a></h5>\n(You can use <a href=\"http://snappydata-slackin.herokuapp.com/\" target=\"_blank\">slack</a>,<a href=\"https://gitter.im/SnappyDataInc/snappydata\" target=\"_blank\">Gitter</a>,<a href=\"http://stackoverflow.com/questions/tagged/snappydata\" target=\"_blank\">stackoverflow </a>, or <a href=\"https://groups.google.com/forum/#!forum/snappydata-user\" target=\"_blank\">google groups</a>) <br> Or, just send an email to chomp@snappydata.io\n</div>\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/undefined","colWidth":10,"editorHide":true,"fontSize":9,"title":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<div style=\"background-color:whitesmoke\">\n<h2>What does this demo showcase?</h2>\n<p>The U.S. Department of Transportation's (DOT) Bureau of Transportation Statistics (BTS) tracks the on-time performance of domestic flights operated by large air carriers.<br>\nSummary information on the number of on-time, delayed, canceled and diverted flights is available for the last 20 years.<br>\nIn this example we used the 2009-2015 data set (40 million records) and show simple analytic queries on \"exact\" as well as \"sampled\" data.You will be able to compare the response times and be able to inspect the accuracy differences.<br> \n<h5> The data set used here is relatively small (few GB of Parquet formatted data). The interesting thing about using stratified sampling is that the error rate drops exponentially with the size of the sample. The exponential error drop off implies with larger data sets, the sampling fraction can also keep getting smaller. e.g. you may need a 2 million sample for a data set with 200 million records, but, may only need a 3 million sample for a data set with a billion records to achieve the same level of accuracy.</h5>\n<h5 style=\"color:red;font-weight:bold\">Anonymous user needs to clone this notebook to execute the paragraphs. Clone option available in the pane next to name of the notebook at the top of the page.</h5>\n<img src=\"https://drive.google.com/uc?export=view&id=0B7_m-QBIIyBQX2xhazR3MkI2UGs\" alt=\"OnTimePerformance\">\n\n<h5>You can always share your thoughts/questions or just encourage us at <a href=\"https://www.tibco.com/products/tibco-computedb\" target=\"_blank\"> https://www.tibco.com/products/tibco-computedb </a></h5>\n(You can use <a href=\"http://snappydata-slackin.herokuapp.com/\" target=\"_blank\">slack</a>,<a href=\"https://gitter.im/SnappyDataInc/snappydata\" target=\"_blank\">Gitter</a>,<a href=\"http://stackoverflow.com/questions/tagged/snappydata\" target=\"_blank\">stackoverflow </a>, or <a href=\"https://groups.google.com/forum/#!forum/snappydata-user\" target=\"_blank\">google groups</a>) <br> Or, just send an email to chomp@snappydata.io\n</div>"}]},"apps":[],"jobName":"paragraph_1578908650515_1151559098","id":"20170324-134137_844449647","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29856"},{"title":"Monitor the cluster, check memory consumption","text":"%angular\n<div style=\"background-color:whitesmoke;\"> <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openSnappyPulse();\">Monitoring Console </span> <span><h5> The Dashboard tab in the Monitoring Console can be used to monitor the cluster and check the memory consumed by the samples.</h5></span></div>","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<div style=\"background-color:whitesmoke;\"> <span style=\"font-weight: bold; color:#428bca; cursor:pointer;\" onclick=\"openSnappyPulse();\">Monitoring Console </span> <span><h5> The Dashboard tab in the Monitoring Console can be used to monitor the cluster and check the memory consumed by the samples.</h5></span></div>"}]},"apps":[],"jobName":"paragraph_1578908650516_-1274098549","id":"20170324-133951_971888384","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29857"},{"text":"%spark\nz.put(\"aws_id\",z.textbox(\"AWS Access ID\"))\nz.put(\"aws_secret\",z.textbox(\"AWS Secret Key\"))\n\nprintln(s\"\"\"%angular\n <div style=\"color:red;background-color:whitesmoke;\">\n            <li><b>Access Credentials</b></li>\n            <ul>\n                <li>Please refer to security credentials guidelines <a href=\"https://tibco-computedb.readthedocs.io/en/enterprise_docv1.2/connectors/access_cloud_data/#using-hive-sitexml-file\" target=\"_blank\">here</a>.</li>\n                <li>The Zeppelin notebooks store state to disk. Using credentials via notebooks will result in them being written to disk. More about Zeppelin storage options is available <a href=\"https://zeppelin.apache.org/docs/0.8.0/setup/storage/storage.html\">here</a></li>\n                <li>If user still chooses to use notebooks as the mode of setting credentials, then user may clone this notebook and delete it immediately after completing use.</li>\n            </ul></div>\"\"\")\nz.run(\"20191206-013620_1370062584\")","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{"0":{"graph":{"mode":"table","height":79,"optionOpen":false}}},"enabled":true},"settings":{"params":{"AWS Access ID":"","AWS Secret Key":""},"forms":{"AWS Access ID":{"type":"TextBox","name":"AWS Access ID","displayName":"AWS Access ID","defaultValue":"","hidden":false,"$$hashKey":"object:30235"},"AWS Secret Key":{"type":"TextBox","name":"AWS Secret Key","displayName":"AWS Secret Key","defaultValue":"","hidden":false,"$$hashKey":"object:30236"}}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":" <div style=\"color:red;background-color:whitesmoke;\">\n            <li><b>Access Credentials</b></li>\n            <ul>\n                <li>Please refer to security credentials guidelines <a href=\"https://tibco-computedb.readthedocs.io/en/enterprise_docv1.2/connectors/access_cloud_data/#using-hive-sitexml-file\" target=\"_blank\">here</a>.</li>\n                <li>The Zeppelin notebooks store state to disk. Using credentials via notebooks will result in them being written to disk. More about Zeppelin storage options is available <a href=\"https://zeppelin.apache.org/docs/0.8.0/setup/storage/storage.html\">here</a></li>\n                <li>If user still chooses to use notebooks as the mode of setting credentials, then user may clone this notebook and delete it immediately after completing use.</li>\n            </ul></div>\n"}]},"apps":[],"jobName":"paragraph_1578908650517_336907402","id":"20191206-013542_1392914067","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29858"},{"title":"[ Auto run]","text":"%jdbc\nexec scala\norg.apache.hadoop.fs.FileSystem.closeAll()\nsc.hadoopConfiguration.set(\"fs.s3a.access.key\", \"{aws_id}\")\nsc.hadoopConfiguration.set(\"fs.s3a.secret.key\", \"{aws_secret}\")","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":true,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":true,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"C0":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"C0\n"}]},"apps":[],"jobName":"paragraph_1578908650518_819315696","id":"20191206-013620_1370062584","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29859"},{"title":"Load data from Parquet files into Exact and Sample Table","text":"%jdbc\nexec scala options (returnDF 'dfSample')\nimport org.apache.spark.sql.SaveMode\n// 'snappy' - SnappySession. Already created for notebook. Extends Spark's SQL Context with support for Streaming using SQL, stratified samples, etc.\n\nsnappy.sql(\"DROP TABLE IF EXISTS AIRLINE_SAMPLE\")\nsnappy.sql(\"DROP TABLE IF EXISTS AIRLINE\")\n\n\nval dataFolder = \"s3a://computedb-test-data/airlineParquetData_2007-15\"\n\n//Use the parquet source to create DataFrame\n//val df1 = snappy.read.parquet(dataFolder)\nsnappy.sql(s\"CREATE EXTERNAL TABLE AIRLINE USING PARQUET OPTIONS( path '$dataFolder')\");\n\n// If you prefer to manage the data in-memory as a column table in snappyData store....\n // snappy.createTable(\"AIRLINE\", \"column\",df1.schema, Map(\"buckets\" -> \"11\"))\n//  df1.write.insertInto(\"AIRLINE\")\n\n// Or, if you rather have this table be a Row table ...\n// snappy.createTable(\"AIRLINE\", \"row\", df1.schema, Map(\"partition_by\"->\"UniqueCarrier\",\"buckets\" -> \"11\"))\n\n// show a few lines from this table\nsnappy.table(\"AIRLINE\").show \nsnappy.sql(\"select * from airline limit 10\").show\n\n// NEXT, ADD A STRATIFIED SAMPLE TABLE WITH 1% OF THE FULL DATA\n snappy.sql(\"CREATE SAMPLE TABLE AIRLINE_SAMPLE ON AIRLINE\" +\n  \" OPTIONS(\" +\n    \"buckets '7', \" +\n    \"qcs 'UniqueCarrier, Year, Month',\" +\n    \"fraction '0.01',persistent 'sync') \")\n\n\nval dfSample = snappy.sql(\"select count(*) sample_ from airline with error\")\n\n// Create Reference data table and load data  (Airline code to Name Reference)\nsnappy.sql(\"DROP TABLE IF EXISTS STAGING_AIRLINEREF\")\nsnappy.sql(\"DROP TABLE IF EXISTS AIRLINEREF\")\n\n//----- CREATE TEMPORARY STAGING TABLE TO LOAD PARQUET FORMATTED DATA -----\n\nsnappy.sql(s\"CREATE external TABLE STAGING_AIRLINEREF  USING parquet OPTIONS( path  's3a://computedb-test-data/airportdata' )\") \n\n//----- CREATE ROW TABLE -----\n\nsnappy.sql(\"CREATE TABLE AIRLINEREF USING row OPTIONS() AS (SELECT CODE, DESCRIPTION FROM STAGING_AIRLINEREF)\")","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":12,"editorHide":false,"fontSize":9,"title":true,"results":[{}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650519_867244195","id":"20160225-135643_869801451","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29860"},{"title":"[WARNING] Run the above para or this one, NOT BOTH. Alternatively, load program using SQL ","text":"%jdbc\nCOMMENT THIS LINE TO MAKE THIS PARAGRAPH WORK CORRECTLY. ADD \"--\" AT THE BEGINNING OF THIS LINE. Thir erroneous line avoid reloading the data if paragraph gets executed by mistake.\nDROP TABLE IF EXISTS AIRLINE_SAMPLE;\nDROP TABLE IF EXISTS AIRLINE;\nCREATE EXTERNAL TABLE AIRLINE USING PARQUET OPTIONS( path 's3a://computedb-test-data/airlineParquetData_2007-15');\nCREATE SAMPLE TABLE AIRLINE_SAMPLE ON AIRLINE OPTIONS(buckets '7', qcs 'UniqueCarrier, Year, Month', fraction '0.01', strataReservoirSize '50', persistent 'sync');\n\n\n-- Create Reference data table and load data  (Airline code to Name Reference)\nDROP TABLE IF EXISTS STAGING_AIRLINEREF;\nDROP TABLE IF EXISTS AIRLINEREF;\n\n--- CREATE TEMPORARY STAGING TABLE TO LOAD PARQUET FORMATTED DATA -----\n\nCREATE external TABLE STAGING_AIRLINEREF  USING parquet OPTIONS( path  's3a://computedb-test-data/airportdata' );\n\n---- CREATE ROW TABLE -----\n\nCREATE TABLE AIRLINEREF USING row OPTIONS() AS (SELECT CODE, DESCRIPTION FROM STAGING_AIRLINEREF);","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","editorHide":false,"fontSize":9,"title":true,"results":[],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1578908650520_1507428038","id":"20160917-020623_88535189","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29861"},{"text":"%angular\n<div style=\"background-color:whitesmoke\">\n<h4> Now, lets do some analytics - queries on the left paragraphs go against the full(\"exact\") data. The right side paras run against the stratified sample created above.  While the difference in performance is 5-10X (left vs right paragraphs) larger volume or concurrency makes the difference more stark. For example, you can RUN several of the left paragraphs concurrently and try the same on the right paragraphs to see the effect of concurrency on response time. </h4>\n</div>\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<div style=\"background-color:whitesmoke\">\n<h4> Now, lets do some analytics - queries on the left paragraphs go against the full(\"exact\") data. The right side paras run against the stratified sample created above.  While the difference in performance is 5-10X (left vs right paragraphs) larger volume or concurrency makes the difference more stark. For example, you can RUN several of the left paragraphs concurrently and try the same on the right paragraphs to see the effect of concurrency on response time. </h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1578908650521_-2029769589","id":"20160928-165803_51665032","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29862"},{"title":"How many records do we have?","text":"%jdbc\nselect count(*) from AIRLINE\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"count(1)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true,"graph":{"mode":"table","height":101,"optionOpen":false,"keys":[{"name":"count(1)","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"count(1)","index":0,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650522_-938897001","id":"20160224-214604_417762107","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29863"},{"title":"How many records in the synopsis table?","text":"%jdbc\n-- sets the error limit on the count query to be under 10%\nselect count(*) rowCount, count(*) as sample_count from AIRLINE with error 0.1;","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"ROWCOUNT":"string","SAMPLE_COUNT":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true,"graph":{"mode":"table","height":112,"optionOpen":false,"keys":[{"name":"ROWCOUNT","index":0,"aggr":"sum"}],"values":[{"name":"SAMPLE_COUNT","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"ROWCOUNT","index":0,"aggr":"sum"},"yAxis":{"name":"SAMPLE_COUNT","index":1,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650522_967978003","id":"20160224-214604_1203690306","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29864"},{"title":"what is the best time of day to travel?","text":"%jdbc\n\nselect  round(DepTime/100)  hourOfDay, AVG(ArrDelay) avgDelay from airline\ngroup by round(DepTime/100)\norder by hourOfDay","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"editorHide":false,"fontSize":9,"title":true,"results":[{"graph":{"mode":"lineChart","height":280,"optionOpen":false,"keys":[{"name":"HOUROFDAY","index":0,"aggr":"sum"}],"values":[{"name":"AVGDELAY","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"HOUROFDAY","index":0,"aggr":"sum"},"yAxis":{"name":"AVGDELAY","index":1,"aggr":"sum"}},"setting":{"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650523_651314765","id":"20160224-214604_1795051693","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29865"},{"title":"what is the best time of day to travel?   (Use AQP)","text":"%jdbc\n\nselect  round(DepTime/100)  hourOfDay, AVG(ArrDelay) avgDelay, absolute_error(avgDelay) ,\nrelative_error(avgDelay), count(*) sample_count from airline\ngroup by round(DepTime/100) order by hourOfDay with error","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"editorHide":false,"fontSize":9,"title":true,"results":[{"graph":{"mode":"lineChart","height":282,"optionOpen":false,"keys":[{"name":"HOUROFDAY","index":0,"aggr":"sum"}],"values":[{"name":"AVGDELAY","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"HOUROFDAY","index":0,"aggr":"sum"},"yAxis":{"name":"AVGDELAY","index":1,"aggr":"sum"}},"setting":{"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650523_-1254520666","id":"20160224-214604_1583531195","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29866"},{"title":"","text":"%md\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":true,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"title":false,"results":[],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1578908650524_-1160971320","id":"20160928-160354_80187002","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29867"},{"title":"Which airline has the most flights?","text":"%jdbc\n\nselect  count(*)  cnt, description airlineName from AIRLINE, AIRLINEREF\nwhere airline.UniqueCarrier = airlineref.Code \ngroup by description  order by cnt desc limit 8\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":[{"graph":{"mode":"pieChart","height":290,"optionOpen":false,"keys":[{"name":"AIRLINENAME","index":1,"aggr":"sum"}],"values":[{"name":"CNT","index":0,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"CNT","index":0,"aggr":"sum"},"yAxis":{"name":"AIRLINENAME","index":1,"aggr":"sum"}}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650525_-317695587","id":"20160224-214604_1127018202","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29868"},{"title":"Which airline has the most flights?   (Use AQP)","text":"%jdbc\n\nselect  count(*)  cnt, description airlineName from AIRLINE, AIRLINEREF\nwhere airline.UniqueCarrier = airlineref.Code \ngroup by description  order by cnt desc limit 8 with error 0.01\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":[{"graph":{"mode":"pieChart","height":300,"optionOpen":false,"keys":[{"name":"AIRLINENAME","index":1,"aggr":"sum"}],"values":[{"name":"CNT","index":0,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"CNT","index":0,"aggr":"sum"},"yAxis":{"name":"AIRLINENAME","index":1,"aggr":"sum"}}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650526_-1087294674","id":"20160608-185741_1797279368","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29869"},{"text":"%md\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":true,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":[],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1578908650527_1005960051","id":"20160928-160423_492906488","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29870"},{"title":"Which airlines arrive on schedule?","text":"%jdbc\n\nselect AVG(ArrDelay) arrivalDelay, UniqueCarrier carrier from airline group by UniqueCarrier\norder by UniqueCarrier\n\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":[{"graph":{"mode":"multiBarChart","height":285,"optionOpen":false,"keys":[{"name":"CARRIER","index":1,"aggr":"sum"}],"values":[{"name":"ARRIVALDELAY","index":0,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"ARRIVALDELAY","index":0,"aggr":"sum"},"yAxis":{"name":"CARRIER","index":1,"aggr":"sum"}},"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650527_1941700440","id":"20160224-214604_1048333091","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29871"},{"title":"Which airlines arrive on schedule?   (Use AQP)","text":"%jdbc\n\nselect AVG(ArrDelay) arrivalDelay, UniqueCarrier carrier from airline group by UniqueCarrier\norder by UniqueCarrier with error 0.1 confidence 0.8 behavior 'do_nothing';\n\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":[{"graph":{"mode":"multiBarChart","height":296,"optionOpen":false,"keys":[{"name":"CARRIER","index":1,"aggr":"sum"}],"values":[{"name":"ARRIVALDELAY","index":0,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"ARRIVALDELAY","index":0,"aggr":"sum"},"yAxis":{"name":"CARRIER","index":1,"aggr":"sum"}},"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650528_461104148","id":"20160224-214604_1378420449","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29872"},{"text":"","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"fontSize":9,"results":[],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1578908650529_-755752924","id":"20160917-025357_739939696","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29873"},{"title":"How is arrival delay trending over the years?","text":"%jdbc\n\nSELECT AVG(ArrDelay) ArrivalDelay, UniqueCarrier, Year_\n\t   FROM airline GROUP BY UniqueCarrier, Year_ ORDER BY\n\t        Year_,UniqueCarrier desc limit 100","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"editorHide":false,"fontSize":9,"title":true,"results":[{"graph":{"mode":"multiBarChart","height":293,"optionOpen":false,"keys":[{"name":"YEAR_","index":2,"aggr":"sum"}],"values":[{"name":"ARRIVALDELAY","index":0,"aggr":"sum"}],"groups":[{"name":"UNIQUECARRIER","index":1,"aggr":"sum"}],"scatter":{"xAxis":{"name":"ARRIVALDELAY","index":0,"aggr":"sum"},"yAxis":{"name":"UNIQUECARRIER","index":1,"aggr":"sum"}},"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650529_-334411610","id":"20160224-214604_58902507","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29874"},{"title":"How is arrival delay trending over the years?   (Use AQP)","text":"%jdbc \n\nSELECT AVG(ArrDelay) ArrivalDelay, UniqueCarrier, Year_\n\t   FROM airline_sample GROUP BY UniqueCarrier, Year_ ORDER BY\n\t         Year_,UniqueCarrier desc limit 100 ","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"editorHide":false,"fontSize":9,"title":true,"results":[{"graph":{"mode":"multiBarChart","height":295,"optionOpen":false,"keys":[{"name":"YEAR_","index":2,"aggr":"sum"}],"values":[{"name":"ARRIVALDELAY","index":0,"aggr":"sum"}],"groups":[{"name":"UNIQUECARRIER","index":1,"aggr":"sum"}],"scatter":{"xAxis":{"name":"ARRIVALDELAY","index":0,"aggr":"sum"},"yAxis":{"name":"UNIQUECARRIER","index":1,"aggr":"sum"}},"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650530_419914019","id":"20160224-214604_2131957529","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29875"},{"title":"Number of Flights that Taxi-in for a long time (outliers)","text":"%jdbc show-instant-results-first\n-- THIS IS AN EXAMPLE OF A QUERY ON OUTLIERS (TOO MUCH TIME TAXIING) BUT WE WANT TO VISUALIZE ASAP AND THEN REPLACE WITH FINAL ACCURATE ANSWER\nselect taxiin, count(*) numFlights, uniqueCarrier from airline where taxiin > ${taxiin} and uniqueCarrier in ('UA','DL','AA','WN') group by taxiin, uniqueCarrier order by taxiin desc","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":[{"graph":{"mode":"scatterChart","height":300,"optionOpen":false,"keys":[{"name":"TAXIIN","index":0,"aggr":"sum"}],"values":[{"name":"NUMFLIGHTS","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"TAXIIN","index":0,"aggr":"sum"},"yAxis":{"name":"NUMFLIGHTS","index":1,"aggr":"sum"},"group":{"name":"UNIQUECARRIER","index":2,"aggr":"sum"}},"forceY":true}}],"enabled":true},"settings":{"params":{"taxiin":"50"},"forms":{"taxiin":{"type":"TextBox","name":"taxiin","defaultValue":"","hidden":false,"$$hashKey":"object:30496"}}},"apps":[],"jobName":"paragraph_1578908650531_391802526","id":"20160917-213418_1713253938","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29876"},{"title":"Which are the worst airports?","text":"%jdbc\n\nselect avg(DepDelay) delay, Origin, count(*) AS cnt \nfrom airline group by Origin having cnt > 500000 order by delay desc limit 10\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DELAY":"string","ORIGIN":"string","CNT":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true,"graph":{"mode":"table","height":324,"optionOpen":true,"keys":[{"name":"ORIGIN","index":1,"aggr":"sum"}],"values":[{"name":"DELAY","index":0,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"DELAY","index":0,"aggr":"sum"},"yAxis":{"name":"ORIGIN","index":1,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650531_1510130053","id":"20160224-214604_1674672602","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29877"},{"title":"Which are the worst airports? (Query Sample AQP table directly )","text":"%jdbc \n\nselect avg(DepDelay) delay, Origin, count(*) as cnt, count(*) as sample_count, absolute_error(delay)\nfrom airline_sample group by Origin having cnt > 500000 order by delay desc limit 10\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DELAY":"string","ORIGIN":"string","CNT":"string","SAMPLE_COUNT":"string","Absolute_Error(DELAY)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true,"graph":{"mode":"table","height":314,"optionOpen":false,"keys":[{"name":"DELAY","index":0,"aggr":"sum"}],"values":[{"name":"ORIGIN","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"DELAY","index":0,"aggr":"sum"},"yAxis":{"name":"ORIGIN","index":1,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650532_-1333341841","id":"20160224-214604_1301744232","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29878"},{"text":"","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650532_2050363598","id":"20160917-031409_245116974","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29879"},{"title":"what is the best day of the week to travel?","text":"%jdbc\nselect  DayOfWeek, AVG(ArrDelay) avgDelay from airline\ngroup by DayOfWeek\norder by  avgDelay desc","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"editorHide":false,"fontSize":9,"title":true,"results":[{"graph":{"mode":"stackedAreaChart","height":300,"optionOpen":false,"keys":[{"name":"DAYOFWEEK","index":0,"aggr":"sum"}],"values":[{"name":"AVGDELAY","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"DAYOFWEEK","index":0,"aggr":"sum"},"yAxis":{"name":"AVGDELAY","index":1,"aggr":"sum"}},"setting":{"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650533_1213425030","id":"20160224-214604_643957094","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29880"},{"title":"what is the best day of the week to travel?   (Use AQP)","text":"%jdbc\n\nselect  DayOfWeek, AVG(ArrDelay) avgDelay from airline_sample\ngroup by DayOfWeek\norder by  avgDelay desc","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"editorHide":false,"fontSize":9,"title":true,"results":[{"graph":{"mode":"stackedAreaChart","height":300,"optionOpen":false,"keys":[{"name":"DAYOFWEEK","index":0,"aggr":"sum"}],"values":[{"name":"AVGDELAY","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"DAYOFWEEK","index":0,"aggr":"sum"},"yAxis":{"name":"AVGDELAY","index":1,"aggr":"sum"}},"setting":{"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650534_1822501825","id":"20160224-214604_1816781625","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29881"},{"text":"","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"fontSize":9,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650534_1317001711","id":"20161013-214535_328039313","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29882"},{"title":"Most popular flight routes in USA","text":"%jdbc\nselect concat(origin,'_',dest) as flight, count(*) count from airline group by concat(origin,'_',dest)  \norder by count desc limit 10;\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":[{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"keys":[{"name":"FLIGHT","index":0,"aggr":"sum"}],"values":[{"name":"COUNT","index":1,"aggr":"sum"}],"groups":[],"scatter":{"yAxis":{"name":"COUNT","index":1,"aggr":"sum"}},"setting":{"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650535_-1332530853","id":"20160608-181802_1852587172","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29883"},{"title":"Most popular flight routes in USA   (Use AQP)","text":"%jdbc\nselect concat(origin,'_',dest) as flight, count(*) count from airline group by concat(origin,'_',dest)  \norder by count desc limit 10 with error 0.1;\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionSupport":true},"colWidth":6,"editorMode":"ace/mode/sql","editorHide":false,"fontSize":9,"title":true,"results":[{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"keys":[{"name":"FLIGHT","index":0,"aggr":"sum"}],"values":[{"name":"COUNT","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"FLIGHT","index":0,"aggr":"sum"},"yAxis":{"name":"COUNT","index":1,"aggr":"sum"}},"setting":{"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650535_-1395724835","id":"20160928-161251_835125952","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29884"},{"text":"%md\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":true,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":[],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1578908650536_-1230900915","id":"20160928-161406_1907199383","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29885"},{"title":"Longest departure delays","text":"%jdbc\n\nselect avg(DepDelay) delay, description, count(*) AS cnt from airline, AIRLINEREF\nwhere airline.UniqueCarrier = airlineref.Code and DepDelay > 30 \ngroup by description having cnt > 50000 order by delay desc limit 100\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"editorHide":false,"fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DELAY":"string","DESCRIPTION":"string","CNT":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true,"graph":{"mode":"table","height":314,"optionOpen":false,"keys":[{"name":"DESCRIPTION","index":1,"aggr":"sum"}],"values":[{"name":"DELAY","index":0,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"DELAY","index":0,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650536_-106559310","id":"20160224-214604_713912881","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29886"},{"title":"Longest departure delay (use AQP)","text":"%jdbc\nselect avg(DepDelay) delay, description, count(*) AS cnt from airline_sample, AIRLINEREF\nwhere airline_sample.UniqueCarrier = airlineref.Code and DepDelay > 30 \ngroup by description having cnt > 50000 order by delay desc limit 100\n","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","colWidth":6,"fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DELAY":"string","DESCRIPTION":"string","CNT":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true,"graph":{"mode":"table","height":320,"optionOpen":false,"keys":[{"name":"DELAY","index":0,"aggr":"sum"}],"values":[{"name":"DESCRIPTION","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"DELAY","index":0,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578908650537_-625406956","id":"20160312-184107_109108266","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29887"},{"text":"%angular\n<div style=\"background-color:whitesmoke;\">\n<h2> Try your own queries below ....</h2>\n<h4>You can always share your thoughts/questions or just encourage us at <a href=\"https://www.tibco.com/products/tibco-computedb\" target=\"_blank\"> https://www.tibco.com/products/tibco-computedb </a></h4>\n(You can use <a href=\"http://snappydata-slackin.herokuapp.com/\" target=\"_blank\">slack</a>,<a href=\"https://gitter.im/SnappyDataInc/snappydata\" target=\"_blank\">Gitter</a>,<a href=\"http://stackoverflow.com/questions/tagged/snappydata\" target=\"_blank\">stackoverflow </a>, or <a href=\"https://groups.google.com/forum/#!forum/snappydata-user\" target=\"_blank\">google groups</a>)\n</div>","user":"anonymous","dateUpdated":"2020-01-13T15:14:10+0530","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<div style=\"background-color:whitesmoke;\">\n<h2> Try your own queries below ....</h2>\n<h4>You can always share your thoughts/questions or just encourage us at <a href=\"https://www.tibco.com/products/tibco-computedb\" target=\"_blank\"> https://www.tibco.com/products/tibco-computedb </a></h4>\n(You can use <a href=\"http://snappydata-slackin.herokuapp.com/\" target=\"_blank\">slack</a>,<a href=\"https://gitter.im/SnappyDataInc/snappydata\" target=\"_blank\">Gitter</a>,<a href=\"http://stackoverflow.com/questions/tagged/snappydata\" target=\"_blank\">stackoverflow </a>, or <a href=\"https://groups.google.com/forum/#!forum/snappydata-user\" target=\"_blank\">google groups</a>)\n</div>"}]},"apps":[],"jobName":"paragraph_1578908650537_-90283131","id":"20170324-134213_1005356681","dateCreated":"2020-01-13T15:14:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29888"}],"name":"Snappy/Cloud Demo 1 - Airline on-time analytics","id":"2EYGQA2UA","noteParams":{},"noteForms":{},"angularObjects":{"angular:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}
